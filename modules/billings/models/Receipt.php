<?php
/**
 * This file is part of Shopbay.org (http://shopbay.org)
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code. 
 */
Yii::import("common.components.behaviors.*");
Yii::import("common.modules.plans.models.Subscription");
/**
 * This is the model class for table "s_receipt".
 *
 * The followings are the available columns in table 's_receipt':
 * @property integer $id
 * @property integer $account_id
 * @property string $receipt_no
 * @property string $reference
 * @property string $items
 * @property decimal $amount
 * @property string $currency
 * @property string $receipt_file
 * @property integer $create_time
 * @property integer $update_time
 *
 * @author kwlok
 */
class Receipt extends Downloadable
{
    const REFERENCE_SEPARATOR = '|';
    const FILE_EXTENSION = 'pdf';
    const TYPE_RECURRING = 'r';//recurring type - means subscription
    const TYPE_CREDITCARD= 'c';//one time cc payment
    private $_billing;
    protected $type = self::TYPE_RECURRING;//default to recurring
    //default receipt templates
    public static $defaultTemplateEmail = 'common.modules.billings.receipts.template_email';
    public static $defaultTemplateEmailAdhoc = 'common.modules.billings.receipts.template_email_adhoc';
    public static $defaultTemplatePdf = 'common.modules.billings.receipts.template_pdf';
    public static $defaultTemplatePdfAdhoc = 'common.modules.billings.receipts.template_pdf_adhoc';
    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Receipt the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }       
    /**
     * Model display name 
     * @param $mode singular or plural, if the language supports, e.g. english
     * @return string the model display name
     */
    public function displayName($mode=Helper::SINGULAR)
    {
        return Sii::t('sii','Receipt|Receipts',[$mode]);
    }    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 's_receipt';
    }
    /**
     * Behaviors for this model
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
              'class'=>'common.components.behaviors.TimestampBehavior',
            ],
            'account' => [
              'class'=>'common.components.behaviors.AccountBehavior',
            ], 
            'locale' => [
                'class'=>'common.components.behaviors.LocaleBehavior',
                'ownerParent'=>'accountProfile',
                'localeAttribute'=>'locale',
            ],    
            //activity could be needed if invoice is manually generated by Admin backend?
            'activity' => [
                'class'=>'common.modules.activities.behaviors.ActivityBehavior',
                'iconUrlSource'=>'account',
            ],
        ];
    } 
    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        return [
            ['account_id, receipt_no, reference, items, amount, currency', 'required'],
            ['account_id', 'numerical', 'integerOnly'=>true],
            ['receipt_no', 'length', 'max'=>25],
            ['receipt_no', 'unique'],
            ['items', 'length', 'max'=>5000],
            ['amount', 'length', 'max'=>10],
            ['amount', 'type', 'type'=>'float'],
            ['currency', 'length', 'max'=>3],
            ['receipt_file', 'length', 'max'=>500],
            ['reference', 'length', 'max'=>100],
            // The following rule is used by search().
            ['id, account_id, receipt_no, reference, items, amount, currency, receipt_file, status, create_time, update_time', 'safe', 'on'=>'search'],
        ];
    }       
    /**
     * @return array relational rules.
     */
    public function relations()
    {
        return [
            'account' => [self::BELONGS_TO, 'Account', 'account_id'],
        ];
    }
    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return [
            'id' => Sii::t('sii','ID'),
            'account_id' => Sii::t('sii','Account'),
            'receipt_no' => Sii::tl('sii','Receipt No',$this->fileLocale),
            'items' => Sii::t('sii','n<=1#Item|n>1#Items'),
            'amount' => Sii::tl('sii','Amount',$this->fileLocale),
            'currency' => Sii::t('sii','Currency'),
            'receipt_file' => Sii::t('sii','Receipt File'),
            'reference' => Sii::t('sii','Reference'),
            'create_time' => Sii::t('sii','Create Time'),
            'update_time' => Sii::t('sii','Update Time'),
            'item' => Sii::t('sii','Item'),
            //extra support for labeling
            'charged_to'=>Sii::tl('sii','Charged To',$this->fileLocale),
            'billed_to'=>Sii::tl('sii','Billed To',$this->fileLocale),
            'transaction_id'=>Sii::tl('sii','Transaction ID',$this->fileLocale),
            'transaction_date'=>Sii::tl('sii','Transaction Date',$this->fileLocale),
            'plan'=>Sii::tl('sii','Plan',$this->fileLocale),
            'subscription_no'=>Sii::tl('sii','Subscription No',$this->fileLocale),
            'service_start'=>Sii::tl('sii','Service Start Date',$this->fileLocale),
            'service_end'=>Sii::tl('sii','Service End Date',$this->fileLocale),
            'receipt_date' => Sii::tl('sii','Receipt Date',$this->fileLocale),
        ];
    }     
    /**
     * Return account profile
     * @return type
     */
    public function getAccountProfile()
    {
        return $this->account->profile;
    } 
    /**
     * Return billing
     * @return Billing
     */
    public function getBilling()
    {
        if (!isset($this->_billing))
            $this->_billing = Billing::model()->mine($this->account_id)->find();
        return $this->_billing;
    } 
    /**
     * A wrapper method to return records by $receiptNo of this model
     * @param type $receiptNo
     * @return \Receipt
     */
    public function receiptNo($receiptNo) 
    {
        $this->getDbCriteria()->mergeWith(['condition'=>'receipt_no = \''.$receiptNo.'\'']);
        return $this;
    }  
    /**
     * A wrapper method to return records by $subscriptionId of this model
     * @param type $subscriptionId
     * @return \Receipt
     */
    public function subscription($subscriptionId) 
    {
        $this->getDbCriteria()->mergeWith(['condition'=>'reference like \'%'.$subscriptionId.self::REFERENCE_SEPARATOR.'%\'']);
        return $this;
    }  
    /**
     * Url to view this model
     * @return string url
     */
    public function getViewUrl()
    {
        return url('receipt/view/'.$this->receipt_no);
    }     
    /**
     * @return string Required by activityBehavior
     */
    public function getName()
    {
        return $this->receipt_no;
    }
    
    public function getItemsData()
    {
        return json_decode($this->items,true);
    }
    
    public function getItemsTotalAmount()
    {
        $total=0.0;
        foreach ($this->itemsData as $item) {
            $total += $item['amount'];
        }
        return $total;
    }
    
    public function getItemPlans()
    {
        $names=[];
        foreach ($this->itemsData as $item) {
            $names[] = $item['plan'];
        }
        return $names;
    }
    
    public function getItemsCount()
    {
        return count($this->itemsData);
    }
    
    public function getDownloadLink()
    {
        $file = [
            'name'=>Sii::t('sii','Download Receipt'),
            'download'=>$this->receipt_no,
            'url'=>$this->downloadUrl,
        ];
        return Helper::htmlDownloadLink($file);
    }
    
    public function getBilledTo()
    {
        $billedTo = $this->billing->email;
        if (isset($this->billing->billed_to) && strlen($this->billing->billed_to)>0)
            $billedTo = '('.$this->billing->billed_to.') '.$billedTo;
        return $billedTo;
    }
    
    public function getFileParams()
    {
        if ($this->type==static::TYPE_RECURRING){
            $fields = [
                'plan','amount','charged_to','transaction_id','transaction_date','service_start',
            ];//recurring
        }
        else {
            $fields = [
                'item','amount','charged_to','transaction_id','transaction_date',
            ];//one time
        }
        
        return [
            'app'=> readConfig('email','sender_name'),
            'email'=>Config::getSystemSetting('email_contact'),
            'site'=>param('SITE_NAME'),
            'model'=>$this,
            'url'=>Yii::app()->urlManager->createHostUrl('/contact'),
            'fields'=>$fields,
        ];
    }
    
    public function saveFile()
    {
        Yii::import('common.extensions.sdompdf.SDompdf');
        $html = Yii::app()->controller->renderPartial($this->getPdfTemplate(),$this->getFileParams(),true);        
        SDompdf::save($html,$this->filepath); 
        return $this->downloadUrl;
    }
    
    public function findFile($filename) 
    {
        $receiptNo = explode('.', $filename);
        return $this->receiptNo($receiptNo[0]);//remove file extension
    }

    public function getFileOwner() 
    {
        return $this->account_id;
    }
    
    public function getFilename()
    {
        return $this->receipt_no.'.pdf';
    }    
    
    public function getDownloadUrl()
    {
        return url('receipt/download/'.$this->filename);
    }
    
    public function getFileLocale()
    {
        return param('LOCALE_DEFAULT');
    }
    /**
     * Get receipt email to send notification.
     * If billing email is not set, account email will be used.
     * @return type
     */
    public function getEmail()
    {
        $email = $this->billing->email;
        if (strlen($email)>0)
            return $email;
        else
            return $this->account->email;
    }
    /**
     * Set receipt type
     * @param string $type 
     */
    public function setType($type)
    {
        $this->type = $type;
    }
    /**
     * Get which email template to pickup
     * Search for config param first, if not found, use back default
     */
    public function getEmailTemplate()
    {
        if ($this->type==static::TYPE_RECURRING){//recurring receipt
            return param('RECEIPT_TEMPLATE_EMAIL')!=null ? param('RECEIPT_TEMPLATE_EMAIL') : static::$defaultTemplateEmail;
        }
        else {//one item receipt
            return param('RECEIPT_TEMPLATE_EMAIL_ADHOC')!=null ? param('RECEIPT_TEMPLATE_EMAIL_ADHOC') : static::$defaultTemplateEmailAdhoc;
        }
    }
    /**
     * Get which pdf template to pickup
     * Search for config param first, if not found, use back default
     */
    public function getPdfTemplate()
    {
        if ($this->type==static::TYPE_RECURRING){//recurring receipt
            return param('RECEIPT_TEMPLATE_PDF')!=null ? param('RECEIPT_TEMPLATE_PDF') : static::$defaultTemplatePdf;
        }
        else {//one item receipt
            return param('RECEIPT_TEMPLATE_PDF_ADHOC')!=null ? param('RECEIPT_TEMPLATE_PDF_ADHOC') : static::$defaultTemplatePdfAdhoc;
        }
    }
    /**
     * Formart credit card "charged to" 
     */   
    public static function formatChargedTo($cardType,$last4)
    {
        return $cardType.' ('.static::maskCC($cardType,$last4).')';
    }
    /**
     * Mask credit card
     */   
    public static function maskCC($cardType,$last4)
    {
        $showX = -4;
        if ($cardType=='American Express')
            return substr('**** ****** *****', 0, $showX) . $last4;
        else 
            return substr('**** **** **** ****', 0, $showX) . $last4;
    }    
    
    public static function formatReferenceKey($subscription)
    {
        if (!$subscription instanceof Subscription)
            throw new CException(Sii::t('sii','Invalid Subscription'));
        return $subscription->id.static::REFERENCE_SEPARATOR.$subscription->subscription_no;
    }
    
    public static function viewUrl($receiptNo)
    {
        return url('receipt/view/'.$receiptNo);
    }
}
