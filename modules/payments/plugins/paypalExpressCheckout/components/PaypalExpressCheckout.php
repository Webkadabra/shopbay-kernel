<?php
/**
 * This file is part of Shopbay.org (http://shopbay.org)
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code. 
 */
Yii::import("common.modules.orders.components.OrderData");
/**
 * Paypal Express Checkout Classic NVP API version 63.0
 * Support only: setExpressCheckout, getExpressCheckoutDetails and doExpressCheckoutPayment
 * 
 * @author kwlok, Sep 2013 / Nov 2014
 */
class PaypalExpressCheckout extends CComponent
{
    const SANDBOX = 0;
    const LIVE    = 1;
    /*
     * Version: this is the API version in the request. 
     * It is a mandatory parameter for each API request. 
     * 
     * note: Tested and working version is 63.0
     */
    public $version = '63.0';
    /*
     * Indicate if is live or sandbox mode; Default is sandbox
     * @var type 
     */
    public $apiMode = self::SANDBOX;
    /*
     * API user: The user that is identified as making the call. you can 
     * also use your own API username that you created on PayPal™ 's sandbox 
     * or the PayPal live site 
     */
    public $apiUsername;
    /*
     * API_password: The password associated with the API user 
     * If you are using your own API username, enter the API password that 
     * was generated by PayPal below 
    */ 
    public $apiPassword;
    /* 
     * API_Signature:The Signature associated with the API user. which is generated by paypal. 
     */ 
    public $apiSignature;
    /*
     * The url (relative to base url) to return the customer after a successful payment
     */
    public $returnUrl;	
    /*
     * The url (relative to base url) to return the customer if he/she cancels the payment
     */
    public $cancelUrl;
    /*
     * How you want to obtain payment. When implementing parallel payments, this field is required and must be set to Order. 
     * Sale – This is a final sale for which you are requesting payment (default).
     * Authorization – This payment is a basic authorization subject to settlement with PayPal Authorization and Capture.
     * Order – This payment is an order authorization subject to settlement with PayPal Authorization and Capture.
     */
    public $paymentAction = 'Sale';
    /*
     * (Optional) The shop brand name to get display at Paypal Review page
     */
    public $brandName;
    /*
     * (Optional) Determines whether or not the PayPal pages should display the shipping address set by you in this SetExpressCheckout request
     * 0 – The PayPal pages should not display the shipping address.
     * 1 – The PayPal pages should display the shipping address.
     */
    public $addrOverride = '0';
    /*
     * (Optional) Enables the buyer to enter a note to the merchant on the PayPal page during checkout. The note is returned in the GetExpressCheckoutDetails response and the DoExpressCheckoutPayment response. It is one of the following values:
     * 0 – The buyer is unable to enter a note to the merchant.
     * 1 – The buyer is able to enter a note to the merchant.
     */
    public $allowNote = '1';
    /*
     * Endpoint: this is the server URL which you have to connect for submitting your API request. 
     */ 
    public $endPoint;
    /** 
     * USE_PROXY: Set this variable to TRUE to route all the API requests through proxy. 
     * like define('USE_PROXY',TRUE); 
     */ 
    public $useProxy = false;
    public $proxyHost = '127.0.0.1'; 
    public $proxyPort = '808'; 
    /* Define the PayPal URL. This is the URL that the buyer is 
     * first sent to to authorize payment with their paypal account 
     * change the URL depending if you are testing on the sandbox 
     * or going to the live PayPal site 
     * For the sandbox, the URL is https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token= 
     * For the live site, the URL is https://www.paypal.com/webscr&cmd=_express-checkout&token= 
     */ 
    public $paypalUrl;
    
    public function init()
    {
        //Whether we are in sandbox or in live environment
        if ($this->apiMode == self::LIVE){
            //live
            $this->paypalUrl = 'https://www.paypal.com/webscr&cmd=_express-checkout&useraction=commit&token='; 
            $this->endPoint = 'https://api-3t.paypal.com/nvp';
        }else{
            //sandbox
            $this->paypalUrl = 'https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&useraction=commit&token=';
            $this->endPoint = 'https://api-3t.sandbox.paypal.com/nvp';
        }
	
        //set return and cancel urls
        $this->returnUrl = Yii::app()->createAbsoluteUrl($this->returnUrl);
        $this->cancelUrl = Yii::app()->createAbsoluteUrl($this->cancelUrl);
    }
    
    public function __construct()
    {
        //empty
    }

    private function _apiSetExpressCheckout($params=array())
    { 
        $nvpstr = '&BRANDNAME='.$this->brandName.
                  //'&LOGOIMG='.urlencode('imageurl').
                  '&RETURNURL='.urlencode($this->returnUrl).
                  '&CANCELURL='.urlencode($this->cancelUrl).
                  '&ALLOWNOTE='.$this->allowNote.
                  '&ADDROVERRIDE='.$this->addrOverride;
        foreach ($params as $key => $value) 
            $nvpstr .= '&'.urlencode($key).'='.urlencode($value);
        logTrace(__METHOD__.' $nvpstr='.$nvpstr);
        $resArray = $this->_hashcall("SetExpressCheckout",$nvpstr); 
        return $resArray; 
    }
    
    private function _apiGetExpressCheckoutDetails($token)
    { 
        $nvpstr='&TOKEN='.$token; 
        logTrace(__METHOD__.' $nvpstr='.$nvpstr);
        $resArray=$this->_hashcall("GetExpressCheckoutDetails",$nvpstr); 
        return $resArray; 
    } 
     
    private function _apiDoExpressCheckoutPayment($params=array())
    { 
        $nvpstr='&TOKEN='.urlencode($params['TOKEN']).
                '&PAYERID='.urlencode($params['PAYERID']);
        foreach ($params as $key => $value) {
            if ((strpos($key, 'PAYMENTREQUEST_') === 0) || (strpos($key, 'L_PAYMENTREQUEST_') === 0))
                $nvpstr .= '&'.$key.'='.urlencode($value);
        }
        logTrace(__METHOD__.' $nvpstr='.$nvpstr);
        $resArray=$this->_hashcall("DoExpressCheckoutPayment",$nvpstr); 
        return $resArray; 
    } 
     
    private function _apiError($errorNo,$errorMsg,$resArray)
    { 
        $resArray['Error']['Number']=$errorNo; 
        $resArray['Error']['Number']=$errorMsg; 
        return $resArray; 
    } 
    
    private function _isCallSucceeded($resArray)
    {
        if (!isset($resArray["ACK"]))
            return false;//no response
        
        $ack = strtoupper($resArray["ACK"]); 
        //Detect Errors 
        if($ack != "SUCCESS" && $ack != 'SUCCESSWITHWARNING'){ 
            return false;
        }else{
            return true;
        }
    }
    
    private function _throwError($result)
    {
        if ($this->apiMode == self::LIVE)//Live mode basic error message
            $error = Sii::t('sii','We were unable to process your request. Please try again later');
        else {//Sandbox output the actual error message to dive in.
            if (isset($result['L_LONGMESSAGE0'])){
                $error = $result['L_LONGMESSAGE0'];
                if (isset($result['L_LONGMESSAGE1']))
                    $error .= '<br>'.$result['L_LONGMESSAGE1'];
                if (isset($result['L_LONGMESSAGE2']))
                    $error .= '<br>'.$result['L_LONGMESSAGE2'];
                if (isset($result['L_LONGMESSAGE3']))
                    $error .= '<br>'.$result['L_LONGMESSAGE3'];
            }
            else
                $error = Sii::t('sii','Could not resolve host');
        }
        throw new CException($error);
    }
     
    private function _hashcall($methodName,$nvpStr)
    {
        $API_UserName = $this->apiUsername; 
        $API_Password = $this->apiPassword; 
        $API_Signature = $this->apiSignature; 
        $API_Endpoint = $this->endPoint; 
        $version = $this->version; 
         
        //setting the curl parameters. 
        $ch = curl_init(); 
        curl_setopt($ch, CURLOPT_URL,$API_Endpoint); 
        curl_setopt($ch, CURLOPT_VERBOSE, 1); 
     
        //turning off the server and peer verification(TrustManager Concept). 
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); 
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); 
     
        curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); 
        curl_setopt($ch, CURLOPT_POST, 1); 
        //if USE_PROXY constant set to TRUE in Constants.php, then only proxy will be enabled. 
        //Set proxy name to PROXY_HOST and port number to PROXY_PORT in constants.php  
         
        if($this->useProxy){ 
            curl_setopt ($ch, CURLOPT_PROXY, $this->proxyHost.":".$this->proxyPort);  
        }
     
        //NVPRequest for submitting to server 
        $nvpreq="METHOD=".urlencode($methodName)."&VERSION=".urlencode($version)."&PWD=".urlencode($API_Password)."&USER=".urlencode($API_UserName)."&SIGNATURE=".urlencode($API_Signature).$nvpStr;
     
        //setting the nvpreq as POST FIELD to curl 
        curl_setopt($ch,CURLOPT_POSTFIELDS,$nvpreq); 
     
        //getting response from server 
        $response = curl_exec($ch); 
        
        //convrting NVPResponse to an Associative Array 
        $nvpResArray=$this->_deformatNVP($response); 
        $nvpReqArray=$this->_deformatNVP($nvpreq); 

        logTrace('curl_exec request=',$nvpReqArray);
        logTrace('curl_exec response=',$nvpResArray);
     
        if (curl_errno($ch)){ 
            $nvpResArray = $this->_apiError(curl_errno($ch),curl_error($ch),$nvpResArray); 
        }else{  
            curl_close($ch); 
        }
     
        return $nvpResArray; 
    } 
     
    /** This function will take NVPString and convert it to an Associative Array and it will decode the response.
      * It is usefull to search for a particular key and displaying arrays. 
      * @nvpstr is NVPString. 
      * @nvpArray is Associative Array. 
      */    
    private function _deformatNVP($nvpstr)
    { 
        $intial=0; 
         $nvpArray = array(); 
     
        while(strlen($nvpstr)){ 
            //postion of Key 
            $keypos= strpos($nvpstr,'='); 
            //position of value 
            $valuepos = strpos($nvpstr,'&') ? strpos($nvpstr,'&'): strlen($nvpstr); 
     
            /*getting the Key and Value values and storing in a Associative Array*/ 
            $keyval=substr($nvpstr,$intial,$keypos); 
            $valval=substr($nvpstr,$keypos+1,$valuepos-$keypos-1); 
            //decoding the respose 
            $nvpArray[urldecode($keyval)] =urldecode( $valval); 
            $nvpstr=substr($nvpstr,$valuepos+1,strlen($nvpstr)); 
         } 
        return $nvpArray; 
    }    
    /**
     * Set api credentials
     * @param CActiveRecord $shop
     * @throws CException
     */
    private function _setApiCredentials($shop)
    {
        $paymentMethod = $shop->getPaymentMethod(PaymentMethod::PAYPAL_EXPRESS_CHECKOUT);
        if ($paymentMethod===null)
            throw new CException('Payment Method "Paypal Express Checkout" not found');

        $this->apiUsername = $paymentMethod->getMethodParam('apiUsername'); 
        $this->apiPassword = $paymentMethod->getMethodParam('apiPassword'); 
        $this->apiSignature = $paymentMethod->getMethodParam('apiSignature'); 
        $this->apiMode = $paymentMethod->getMethodParam('apiMode'); 
    }
    /**
     * Boilerplate to call api
     * @param type $api Api name
     * @param type $params
     * @param CActiveRecord $shopModel
     * @return string $result
     */
    private function _callApi($api,$params,$shopModel)
    {
        $this->_setApiCredentials($shopModel);
        switch ($api) {
            case 'setExpressCheckout':
                $result = $this->_apiSetExpressCheckout($params); 
                break;
            case 'getExpressCheckoutDetails':
                $result = $this->_apiGetExpressCheckoutDetails($params); 
                break;
            case 'doExpressCheckout':
                $result = $this->_apiDoExpressCheckoutPayment($params); 
                break;
            default:
                throw new CException(Sii::t('sii','Invalid API'));
        }
        
        logTrace(__METHOD__.' response of '.$api,$result);
        //Detect Errors 
        if(!$this->_isCallSucceeded($result)){ 
            $this->_throwError($result);
        }
        else { 
            return $result;
        }
    }
    /** 
      * This functions prepares the checkout data required for Paypal express checkout
      * The input It is usefull to search for a particular key and displaying arrays. 
      * @param array Checkout data (query string) from prepareCheckoutData
      * @return array response from setExpressCheckout
      */       
    public function expressCheckout($shop,$checkoutData)
    {
        return $this->_callApi('setExpressCheckout', $checkoutData, $shop);
    }
    /** 
      * This functions the checkout data based on method getExpressCheckoutDetails
      *
      * @param CActiveRecord Expecting Shop model
      * @param string Required token to retrieved express checkout data
      * @return array response from getExpressCheckoutDetails
      */       
    public function getCheckoutData($shop,$token)
    {
        return $this->_callApi('getExpressCheckoutDetails', $token, $shop);
    } 
    /** 
      * This functions prepares the checkout data required for Paypal express checkout
      * The input It is usefull to search for a particular key and displaying arrays. 
      * @param CActiveRecord Expecting Shop model
      * @param array Checkout data (query string) from prepareCheckoutData
      * @return array response from setExpressCheckout
      */       
    public function confirmPayment($shop,$checkoutData)
    {
        return $this->_callApi('doExpressCheckout', $checkoutData, $shop);
    }
    /** 
      * This functions prepares the checkout data required for Paypal express checkout
      * The input It is usefull to search for a particular key and displaying arrays. 
      * @param string Cart currency 
      * @param CMap Cart checkout items
      * @param array Cart total numbers 
      * @param string Indicate if to override shipping address (input from own website, not in paypal)
      * @param CartAddressForm Shipping address to override
      * @return array checkoutData
      */     
    public function prepareCheckoutData($cart,$addressOverride='0')
    {
        $shop = $cart->getShop($cart->getCheckoutShop());
        $this->brandName = $shop->displayLanguageValue('name',user()->getLocale()); 
        $paymentMethod = $shop->getPaymentMethod(PaymentMethod::PAYPAL_EXPRESS_CHECKOUT);
        if ($paymentMethod===null)
            throw new CException('Payment Method "Paypal Express Checkout" not found');

        $checkoutData = new CMap();
        $n = 0;
        foreach ($cart->getCheckoutShippingsByShop($shop->id,true) as $shipping => $total) {
            
            $m = 0;
            foreach ($cart->getCheckoutItemsByShopShipping($shop->id,$shipping) as $item){
                
                $itemPrice = $item->getPrice();
                $itemName = $item->displayLanguageValue('name',user()->getLocale());
                $itemDesc = Sii::t('sii','Unit price {unit_price}',array('{unit_price}'=>$shop->currency.$item->unit_price));
                //rewrite $itemDesc if it is a promotional item
                if ($item->isCampaignItem()){
                    $itemDesc = Sii::t('sii','{discount}, original price {unit_price}',array(
                                    '{discount}'=>$item->getCampaignLocaleValue('campaign_offer_tag',user()->getLocale()),
                                    '{unit_price}'=>$shop->currency.$item->unit_price,
                                ));                   
                }
                //extend $itemDesc if has option fee
                $itemOptionFee = $item->getOptionFee();
                if ($itemOptionFee > 0){
                    $itemPrice = $itemPrice + $itemOptionFee;
                    $itemDesc .= ', '. Sii::t('sii','option fee {option_fee}',array('{option_fee}'=>$shop->currency.$itemOptionFee));
                }
                //extend $itemDesc if has shiping surcharge fee
                $itemShippingSurcharge = $item->getShippingSurcharge();
                if ($itemShippingSurcharge > 0){
                    $itemPrice = $itemPrice + $itemShippingSurcharge;
                    $itemDesc .= ', '.Sii::t('sii','shipping surcharge {shipping_surcharge}',array('{shipping_surcharge}'=>$shop->currency.$itemShippingSurcharge));
                }
                
                //due to rounding issue, $itemTax may not be accurate when sum up to compare with $tax
                //anyway, it is not mandatory to include $itemTax
                //$itemTax = round($orderData->taxRate * $itemPrice,2);//need 2 decimal places, else get error
                
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_NAME'.$m, $itemName);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_AMT'.$m, $itemPrice);
                //$checkoutData->add('L_PAYMENTREQUEST_'.$n.'_TAXAMT'.$m, $itemTax);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_QTY'.$m, $item->quantity);
                if (isset($itemDesc))
                    $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_DESC'.$m, $itemDesc);
                $m++;
            }
            
            $orderData = Yii::app()->serviceManager->getOrderManager()->calculatePriceAfterDiscountAfterTax($shop,$cart->getCheckoutItemTotal($shop->id),$total['shipping_rate'],$cart->getCheckoutCount($shop->id),$cart->getPromocode($shop->id));
            if ($orderData->hasSale){
                //there is a sale discount!
                $saleDiscount = $orderData->getDiscountSaleData();
                $m++;
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_NAME'.$m, $saleDiscount->discount_tip);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_AMT'.$m, $saleDiscount->discount);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_QTY'.$m, 1);
            }
            
            if ($orderData->hasPromo){
                //there is a promocode discount!
                $promoDiscount = $orderData->getDiscountPromoData();
                $m++;
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_NAME'.$m, $promoDiscount->discount_tip);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_AMT'.$m, $promoDiscount->discount);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_QTY'.$m, 1);
            }
            
            if ($orderData->onFreeShipping){
                //there is a promocode free shipping!
                $m++;
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_NAME'.$m, $orderData->freeShippingTip);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_AMT'.$m, -$total['shipping_rate']);
                $checkoutData->add('L_PAYMENTREQUEST_'.$n.'_QTY'.$m, 1);
            }
            
            $totalAfterDiscount = (1 + $orderData->discountRate) * $total['price'];//+ sign as discountRate is -ve
            $tax = round($orderData->taxRate * $totalAfterDiscount,2);//need 2 decimal places, else get error
            
            if ($orderData->onFreeShipping)
                $totalAfterDiscount -=  $total['shipping_rate'];//deduct shippping fee
            
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_PAYMENTREQUESTID', $shipping);
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_DESC', urlencode('Shipping: '.$cart->getShipping($shipping)->displayLanguageValue('name',user()->getLocale())));
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_PAYMENTACTION', urlencode($this->paymentAction));
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_SELLERPAYPALACCOUNTID', $paymentMethod->getMethodParam('email'));
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_CURRENCYCODE', urlencode($shop->currency));
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_ITEMAMT', $totalAfterDiscount);
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_TAXAMT', $tax);
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPPINGAMT', $total['shipping_rate']);
            $checkoutData->add('PAYMENTREQUEST_'.$n.'_AMT', $totalAfterDiscount + $tax + $total['shipping_rate']);
            
            if ($addressOverride=='1'){
                $address = $cart->getShippingAddress();  
                if ($address==null)
                    throw new CException('Address is required for address overriden');
                //override shipping address
                $this->addrOverride = $addressOverride; 
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTONAME', $address->recipient);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOSTREET', $address->address1);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOSTREET2', $address->address2);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOCITY', $address->city);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOSTATE', $address->state);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOZIP', $address->postcode);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOCOUNTRYCODE', $address->country);
                $checkoutData->add('PAYMENTREQUEST_'.$n.'_SHIPTOPHONENUM', $address->mobile);
                if (!empty($address->email))
                    $checkoutData->add('EMAIL', $address->email);//to support guest checkout
            }
              
            $n++;
        }
            
        //PAYMENTREQUEST_n_INVNUM -> equal to my invoice number
        logTrace('prepareCheckoutData',$checkoutData);
        return $checkoutData->toArray();
    }    
    /** 
     * This functions construct a shipping address object based on the shipping data returned from method getExpressCheckoutDetails
     *
     * @param array Response from getExpressCheckoutDetails
     * @return stdClass address object
     */       
    public function getShippingAddress($response)
    {
        //take from request n=0 is sufficient since all parallel payments, if any, share common shipping address
        $address = new stdClass();
        $address->recipient = $response['PAYMENTREQUEST_0_SHIPTONAME'];
        $address->mobile = isset($response['PAYMENTREQUEST_0_SHIPTOPHONENUM'])?$response['PAYMENTREQUEST_0_SHIPTOPHONENUM']:'';
        $address->address1 = $response['PAYMENTREQUEST_0_SHIPTOSTREET'];
        $address->address2 = isset($response['PAYMENTREQUEST_0_SHIPTOSTREET2'])?$response['PAYMENTREQUEST_0_SHIPTOSTREET2']:'';
        $address->postcode = $response['PAYMENTREQUEST_0_SHIPTOZIP'];
        $address->city = $response['PAYMENTREQUEST_0_SHIPTOCITY'];
        $address->state = isset($response['PAYMENTREQUEST_0_SHIPTOSTATE'])?$response['PAYMENTREQUEST_0_SHIPTOSTATE']:'';
        $address->country = $response['PAYMENTREQUEST_0_SHIPTOCOUNTRYNAME'];
        $address->note = isset($response['PAYMENTREQUEST_0_NOTETEXT'])?$response['PAYMENTREQUEST_0_NOTETEXT']:'';
        if (user()->isGuest)//only collect email when user is a guest, else use back user email registered at system
            $address->email = isset($response['EMAIL'])?$response['EMAIL']:'';
        return $address;
    }    
    /**
     * Get system trace (supports parallel payments for different shipping)
     * @param array Response from doExpressCheckoutPayment
     * @return type
     */
    public function getSystemTrace($response)
    {
        $trace = new CMap();
        $trace->add('ACK',$response['ACK']);
        $trace->add('CORRELATIONID',$response['CORRELATIONID']);
        $trace->add('TIMESTAMP',$response['TIMESTAMP']);
        foreach ($response as $key => $value) {
            //normal single payment
            if ((strpos($key, 'PAYMENTREQUEST_') === 0)){
                if (substr($key, -4)=='DESC'){//extract PAYMENTREQUEST_n_DESC
                    $trace->add('SHIPPING #'.$key[15],$response[$key]);
                }
                if (substr($key, -4)=='_AMT'){//extract PAYMENTREQUEST_n_AMT, avoid _TAXAMT, _FEEAMT
                    $trace->add('AMT #'.$key[15],$response[$key]);
                }
                if (substr($key, -13)=='TRANSACTIONID'){//extract PAYMENTREQUEST_n_TRANSACTIONID
                    $trace->add('TRANSACTIONID #'.$key[15],$response[$key]);
                }
            }
            //parallel payments
            if ((strpos($key, 'PAYMENTINFO_') === 0)){
                if (substr($key, -4)=='_AMT'){//extract PAYMENTREQUEST_n_AMT, avoid _TAXAMT, _FEEAMT
                    $trace->add('AMT #'.$key[12],$response[$key]);
                }
                if (substr($key, -13)=='TRANSACTIONID'){//extract PAYMENTREQUEST_n_TRANSACTIONID
                    $trace->add('TRANSACTIONID #'.$key[12],$response[$key]);
                }
            }
        }
        return $trace->toArray();
    }
    /**
     * Return checkout button
     * @return string
     */
    public static function getExpressCheckoutButton()
    {
        return 'https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif';
    }
        
}